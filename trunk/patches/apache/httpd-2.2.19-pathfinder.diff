diff -urN httpd-2.2.19-clean/Makefile.in httpd-2.2.19-pathfinder/Makefile.in
--- httpd-2.2.19-clean/Makefile.in	2008-11-25 15:24:49.000000000 -0500
+++ httpd-2.2.19-pathfinder/Makefile.in	2011-07-29 13:43:15.000000000 -0400
@@ -4,7 +4,7 @@
 
 PROGRAM_NAME         = $(progname)
 PROGRAM_SOURCES      = modules.c
-PROGRAM_LDADD        = buildmark.o $(HTTPD_LDFLAGS) $(PROGRAM_DEPENDENCIES) $(EXTRA_LIBS) $(AP_LIBS) $(LIBS)
+PROGRAM_LDADD        = buildmark.o $(HTTPD_LDFLAGS) $(PROGRAM_DEPENDENCIES) $(EXTRA_LIBS) $(AP_LIBS) $(LIBS) $(PATHFINDER_LIBS)
 PROGRAM_PRELINK      = $(COMPILE) -c $(top_srcdir)/server/buildmark.c
 PROGRAM_DEPENDENCIES = \
   server/libmain.la \
diff -urN httpd-2.2.19-clean/acinclude.m4 httpd-2.2.19-pathfinder/acinclude.m4
--- httpd-2.2.19-clean/acinclude.m4	2008-11-24 06:06:52.000000000 -0500
+++ httpd-2.2.19-pathfinder/acinclude.m4	2011-07-29 13:43:15.000000000 -0400
@@ -98,6 +98,8 @@
   APACHE_SUBST(APU_INCLUDEDIR)
   APACHE_SUBST(APU_VERSION)
   APACHE_SUBST(APU_CONFIG)
+  APACHE_SUBST(PATHFINDER_CFLAGS)
+  APACHE_SUBST(PATHFINDER_LIBS)
 
   abs_srcdir="`(cd $srcdir && pwd)`"
 
diff -urN httpd-2.2.19-clean/modules/ssl/Makefile.in httpd-2.2.19-pathfinder/modules/ssl/Makefile.in
--- httpd-2.2.19-clean/modules/ssl/Makefile.in	2006-07-11 23:38:44.000000000 -0400
+++ httpd-2.2.19-pathfinder/modules/ssl/Makefile.in	2011-07-29 13:43:15.000000000 -0400
@@ -19,6 +19,8 @@
 
 include $(top_srcdir)/build/special.mk
 
+CFLAGS += $(PATHFINDER_CFLAGS)
+
 #
 #   developer stuff
 #   (we really don't expect end users to use these targets!)
diff -urN httpd-2.2.19-clean/modules/ssl/config.m4 httpd-2.2.19-pathfinder/modules/ssl/config.m4
--- httpd-2.2.19-clean/modules/ssl/config.m4	2006-04-21 21:53:06.000000000 -0400
+++ httpd-2.2.19-pathfinder/modules/ssl/config.m4	2011-07-29 13:43:15.000000000 -0400
@@ -12,6 +12,8 @@
 dnl  See the License for the specific language governing permissions and
 dnl  limitations under the License.
 
+sinclude(/usr/share/aclocal/pkg.m4)
+
 AC_DEFUN([CHECK_DISTCACHE], [
   AC_MSG_CHECKING(whether Distcache is required)
   ap_ssltk_dc="no"
@@ -122,6 +124,17 @@
        # structure, so ask libtool to hide everything else:
        APR_ADDTO(MOD_SSL_LDADD, [-export-symbols-regex ssl_module])
     fi
+
+    AC_ARG_WITH(pathfinder,
+        APACHE_HELP_STRING(--with-pathfinder,with libpathfinder support))
+    if test "$with_pathfinder" != "no"; then
+        PKG_CHECK_MODULES([PATHFINDER], [pathfinder-openssl dbus-1 openssl])
+        if test -n "$PATHFINDER_CFLAGS$PATHFINDER_LIBS"; then
+            AC_DEFINE(HAVE_PATHFINDER, 1, [we have pathfinder])
+        fi
+        AC_SUBST(PATHFINDER_CFLAGS)
+        AC_SUBST(PATHFINDER_LIBS)
+    fi
 ])
 
 # Ensure that other modules can pick up mod_ssl.h
diff -urN httpd-2.2.19-clean/modules/ssl/mod_ssl.c httpd-2.2.19-pathfinder/modules/ssl/mod_ssl.c
--- httpd-2.2.19-clean/modules/ssl/mod_ssl.c	2010-07-12 14:47:45.000000000 -0400
+++ httpd-2.2.19-pathfinder/modules/ssl/mod_ssl.c	2011-07-29 13:43:15.000000000 -0400
@@ -152,7 +152,14 @@
                 "Set user name to SSL variable value")
     SSL_CMD_SRV(StrictSNIVHostCheck, FLAG,
                 "Strict SNI virtual host checking")
-
+#ifdef HAVE_PATHFINDER
+    SSL_CMD_SRV(Pathfinder, TAKE1,
+                "Enable or disable RFC 3280 path validation with pathfinder "
+                "(`on', `off')")
+    SSL_CMD_SRV(PathfinderPolicy, TAKE1,
+                "Optional policy target OID for path validation "
+                "with pathfinder (`##.##.##.##....')")
+#endif
     /*
      * Proxy configuration for remote SSL connections
      */
diff -urN httpd-2.2.19-clean/modules/ssl/ssl_engine_config.c httpd-2.2.19-pathfinder/modules/ssl/ssl_engine_config.c
--- httpd-2.2.19-clean/modules/ssl/ssl_engine_config.c	2011-04-14 09:56:17.000000000 -0400
+++ httpd-2.2.19-pathfinder/modules/ssl/ssl_engine_config.c	2011-07-29 13:43:15.000000000 -0400
@@ -167,6 +167,10 @@
     sc->proxy_enabled          = UNSET;
     sc->vhost_id               = NULL;  /* set during module init */
     sc->vhost_id_len           = 0;     /* set during module init */
+#ifdef HAVE_PATHFINDER
+    sc->pathfinder_enabled     = FALSE;
+    sc->pathfinder_policy      = NULL;
+#endif
     sc->session_cache_timeout  = UNSET;
     sc->cipher_server_pref     = UNSET;
     sc->insecure_reneg         = UNSET;
@@ -264,6 +268,10 @@
     cfgMerge(mc, NULL);
     cfgMerge(enabled, SSL_ENABLED_UNSET);
     cfgMergeBool(proxy_enabled);
+#ifdef HAVE_PATHFINDER
+    cfgMergeBool(pathfinder_enabled);
+    cfgMergeString(pathfinder_policy);
+#endif
     cfgMergeInt(session_cache_timeout);
     cfgMergeBool(cipher_server_pref);
     cfgMergeBool(insecure_reneg);
@@ -932,6 +940,16 @@
 
     sc->server->crl_path = arg;
 
+#ifdef HAVE_PATHFINDER
+    if (sc->pathfinder_enabled)
+    {
+        ap_log_error(APLOG_MARK, APLOG_WARNING, 0,
+                     cmd->server,
+                     "Ignoring SSLCARevocationPath since "
+                     "SSLPathfinder is enabled.");
+    }
+#endif
+
     return NULL;
 }
 
@@ -948,6 +966,16 @@
 
     sc->server->crl_file = arg;
 
+#ifdef HAVE_PATHFINDER
+    if (sc->pathfinder_enabled)
+    {
+        ap_log_error(APLOG_MARK, APLOG_WARNING, 0,
+                     cmd->server,
+                     "Ignoring SSLCARevocationFile since "
+                     "SSLPathfinder is enabled.");
+    }
+#endif
+
     return NULL;
 }
 
@@ -1032,6 +1060,16 @@
         sc->server->auth.verify_depth = depth;
     }
 
+#ifdef HAVE_PATHFINDER
+    if (sc->pathfinder_enabled)
+    {
+        ap_log_error(APLOG_MARK, APLOG_WARNING, 0,
+                     cmd->server,
+                     "Ignoring SSLVerifyDepth since "
+                     "SSLPathfinder is enabled.");
+    }
+#endif
+
     return NULL;
 }
 
@@ -1328,6 +1366,42 @@
     return NULL;
 }
 
+#ifdef HAVE_PATHFINDER
+const char *ssl_cmd_SSLPathfinder(cmd_parms *cmd, void *dcfg, const char *arg)
+{
+    SSLSrvConfigRec *sc = mySrvConfig(cmd->server);
+
+    if (!strcasecmp(arg, "On")) {
+        sc->pathfinder_enabled = TRUE;
+        return NULL;
+    }
+    else if (!strcasecmp(arg, "Off")) {
+        sc->pathfinder_enabled = FALSE;
+        return NULL;
+    }
+
+    return "Argument must be On or Off";
+}
+
+const char *ssl_cmd_SSLPathfinderPolicy(cmd_parms *cmd, void *dcfg,
+                                        const char *arg)
+{
+    SSLSrvConfigRec *sc = mySrvConfig(cmd->server);
+
+    const char *p = arg;
+    while (p && *p)
+    {
+        if ((*p < '0' || *p > '9') && *p != '.')
+            return "Argument must be a dotted numerical OID";
+
+        p++;
+    }
+
+    sc->pathfinder_policy = arg;
+    return NULL;
+}
+#endif
+
 const char *ssl_cmd_SSLProxyProtocol(cmd_parms *cmd,
                                      void *dcfg,
                                      const char *arg)
@@ -1379,6 +1453,16 @@
 
     sc->proxy->auth.verify_depth = depth;
 
+#ifdef HAVE_PATHFINDER
+    if (sc->pathfinder_enabled)
+    {
+        ap_log_error(APLOG_MARK, APLOG_WARNING, 0,
+                     cmd->server,
+                     "Ignoring SSLProxyVerifyDepth since "
+                     "SSLPathfinder is enabled.");
+    }
+#endif
+
     return NULL;
 }
 
@@ -1427,6 +1511,16 @@
 
     sc->proxy->crl_path = arg;
 
+#ifdef HAVE_PATHFINDER
+    if (sc->pathfinder_enabled)
+    {
+        ap_log_error(APLOG_MARK, APLOG_WARNING, 0,
+                     cmd->server,
+                     "Ignoring SSLProxyCARevocationPath since "
+                     "SSLPathfinder is enabled.");
+    }
+#endif
+
     return NULL;
 }
 
@@ -1443,6 +1537,16 @@
 
     sc->proxy->crl_file = arg;
 
+#ifdef HAVE_PATHFINDER
+    if (sc->pathfinder_enabled)
+    {
+        ap_log_error(APLOG_MARK, APLOG_WARNING, 0,
+                     cmd->server,
+                     "Ignoring SSLProxyCARevocationFile since "
+                     "SSLPathfinder is enabled.");
+    }
+#endif
+
     return NULL;
 }
 
diff -urN httpd-2.2.19-clean/modules/ssl/ssl_engine_init.c httpd-2.2.19-pathfinder/modules/ssl/ssl_engine_init.c
--- httpd-2.2.19-clean/modules/ssl/ssl_engine_init.c	2011-04-14 09:56:17.000000000 -0400
+++ httpd-2.2.19-pathfinder/modules/ssl/ssl_engine_init.c	2011-07-29 13:43:15.000000000 -0400
@@ -561,6 +561,58 @@
     SSL_CTX_set_info_callback(ctx, ssl_callback_Info);
 }
 
+static STACK_OF(X509_NAME) *populate_ca_list(BOOL need_ca_cert,
+                                             server_rec *s,
+                                             apr_pool_t *p,
+                                             apr_pool_t *ptemp,
+                                             modssl_ctx_t *mctx)
+{
+    SSL_CTX *ctx = mctx->ssl_ctx;
+    STACK_OF(X509_NAME) *ca_list = NULL;
+
+    if (need_ca_cert) {
+        if (!mctx->auth.ca_cert_file && !mctx->auth.ca_cert_path)
+            return NULL;
+
+        ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s,
+                     "Configuring client authentication");
+
+        if (!SSL_CTX_load_verify_locations(ctx,
+                         MODSSL_PCHAR_CAST mctx->auth.ca_cert_file,
+                         MODSSL_PCHAR_CAST mctx->auth.ca_cert_path))
+        {
+            ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,
+                    "Unable to configure verify locations "
+                    "for client authentication");
+            ssl_log_ssl_error(APLOG_MARK, APLOG_ERR, s);
+            ssl_die();
+        }
+    }
+
+    if (mctx->pks && (mctx->pks->ca_name_file || mctx->pks->ca_name_path)) {
+        ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s,
+                "Configuring hint-list for client authentication (1)");
+        ca_list = ssl_init_FindCAList(s, ptemp,
+                                      mctx->pks->ca_name_file,
+                                      mctx->pks->ca_name_path);
+    } else if (mctx->auth.ca_cert_file || mctx->auth.ca_cert_path) {
+        ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s,
+                "Configuring hint-list for client authentication (2)");
+        ca_list = ssl_init_FindCAList(s, ptemp,
+                                      mctx->auth.ca_cert_file,
+                                      mctx->auth.ca_cert_path);
+    }
+
+    if (!ca_list) {
+        ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,
+                "Unable to determine list of acceptable "
+                "CA certificates for client authentication");
+        ssl_die();
+    }
+
+    return ca_list;
+}
+
 static void ssl_init_ctx_verify(server_rec *s,
                                 apr_pool_t *p,
                                 apr_pool_t *ptemp,
@@ -592,43 +644,32 @@
         verify |= SSL_VERIFY_PEER;
     }
 
+#ifdef HAVE_PATHFINDER
+    if (mctx->sc->pathfinder_enabled)
+    {
+        SSL_CTX_set_verify(ctx, verify, NULL);
+        SSL_CTX_set_cert_verify_callback(ctx, ssl_callback_pathfinder, NULL);
+    }
+    else
+        SSL_CTX_set_verify(ctx, verify, ssl_callback_SSLVerify);
+#else
     SSL_CTX_set_verify(ctx, verify, ssl_callback_SSLVerify);
+#endif
 
     /*
      * Configure Client Authentication details
      */
-    if (mctx->auth.ca_cert_file || mctx->auth.ca_cert_path) {
-        ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s,
-                     "Configuring client authentication");
-
-        if (!SSL_CTX_load_verify_locations(ctx,
-                         MODSSL_PCHAR_CAST mctx->auth.ca_cert_file,
-                         MODSSL_PCHAR_CAST mctx->auth.ca_cert_path))
-        {
-            ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,
-                    "Unable to configure verify locations "
-                    "for client authentication");
-            ssl_log_ssl_error(APLOG_MARK, APLOG_ERR, s);
-            ssl_die();
-        }
-
-        if (mctx->pks && (mctx->pks->ca_name_file || mctx->pks->ca_name_path)) {
-            ca_list = ssl_init_FindCAList(s, ptemp,
-                                          mctx->pks->ca_name_file,
-                                          mctx->pks->ca_name_path);
-        } else
-            ca_list = ssl_init_FindCAList(s, ptemp,
-                                          mctx->auth.ca_cert_file,
-                                          mctx->auth.ca_cert_path);
-        if (!ca_list) {
-            ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,
-                    "Unable to determine list of acceptable "
-                    "CA certificates for client authentication");
-            ssl_die();
-        }
+#ifdef HAVE_PATHFINDER
+    if (mctx->sc->pathfinder_enabled)
+        ca_list = populate_ca_list(FALSE, s, p, ptemp, mctx);
+    else
+        ca_list = populate_ca_list(TRUE, s, p, ptemp, mctx);
+#else
+    ca_list = populate_ca_list(TRUE, s, p, ptemp, mctx);
+#endif
 
+    if (ca_list)
         SSL_CTX_set_client_CA_list(ctx, ca_list);
-    }
 
     /*
      * Give a warning when no CAs were configured but client authentication
diff -urN httpd-2.2.19-clean/modules/ssl/ssl_engine_kernel.c httpd-2.2.19-pathfinder/modules/ssl/ssl_engine_kernel.c
--- httpd-2.2.19-clean/modules/ssl/ssl_engine_kernel.c	2010-02-27 16:00:58.000000000 -0500
+++ httpd-2.2.19-pathfinder/modules/ssl/ssl_engine_kernel.c	2011-07-29 13:43:15.000000000 -0400
@@ -30,6 +30,48 @@
                                             -- Unknown                */
 #include "ssl_private.h"
 
+#ifdef HAVE_PATHFINDER
+#include <libpathfinder.h>
+static int pathfinder_helper(X509 *cert, server_rec *s, char **errmsg)
+{
+    SSLSrvConfigRec *sc = mySrvConfig(s);
+
+    const char* hex     = "0123456789ABCDEF";
+    size_t size = i2d_X509(cert, NULL);
+    unsigned char *keybuf, *iend;
+    iend = keybuf = malloc(size);
+    i2d_X509(cert, &iend);
+    char *certdata_str = malloc(size * 2 + 1);
+    unsigned char *cp = keybuf;
+    char *certdata_str_i = certdata_str;
+    while (cp < iend)
+    {
+        unsigned char ch = *cp++;
+        *certdata_str_i++ = hex[(ch >> 4) & 0xf];
+        *certdata_str_i++ = hex[ch & 0xf];
+    }
+    *certdata_str_i = 0;
+    free(keybuf);
+
+    const char *policy = sc->pathfinder_policy;
+    if (!policy || !strcmp(policy, ""))
+        policy = "2.5.29.32.0"; // anyPolicy
+
+    int initial_explicit_policy = strcmp(policy, "2.5.29.32.0") ? 1 : 0;
+
+    int validated = pathfinder_dbus_verify(certdata_str, policy, 
+                                           initial_explicit_policy, 0, errmsg);
+
+    if (!validated)
+        ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,
+                     "Path Verification failed: %s", *errmsg);
+
+    free(certdata_str);
+
+    return validated;
+}
+#endif
+
 static void ssl_configure_env(request_rec *r, SSLConnRec *sslconn);
 #ifndef OPENSSL_NO_TLSEXT
 static int ssl_find_vhost(void *servername, conn_rec *c, server_rec *s);
@@ -482,7 +524,19 @@
             verify |= SSL_VERIFY_PEER;
         }
 
+#ifdef HAVE_PATHFINDER
+        if (sc->pathfinder_enabled)
+        {
+            modssl_set_verify(ssl, verify, NULL);
+            SSL_CTX_set_cert_verify_callback(ctx, ssl_callback_pathfinder, NULL);
+        }
+        else
+        {
+            modssl_set_verify(ssl, verify, ssl_callback_SSLVerify);
+        }
+#else
         modssl_set_verify(ssl, verify, ssl_callback_SSLVerify);
+#endif
         SSL_set_verify_result(ssl, X509_V_OK);
 
         /* determine whether we've to force a renegotiation */
@@ -674,6 +728,32 @@
                       "Requesting connection re-negotiation");
 
         if (renegotiate_quick) {
+#ifdef HAVE_PATHFINDER
+            if (sc->pathfinder_enabled) {
+                /* perform just a manual re-verification of the peer */
+                ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
+                             "Performing quick renegotiation: "
+                             "just re-verifying the peer");
+
+                cert = SSL_get_peer_certificate(ssl);
+                char *pf_errmsg;
+                int validated = pathfinder_helper(cert, r->server, &pf_errmsg);
+                free(pf_errmsg);
+
+                if (!validated) {
+                    ap_log_error(APLOG_MARK, APLOG_ERR, 0, r->server,
+                                 "Re-negotiation verification step failed");
+                    ssl_log_ssl_error(APLOG_MARK, APLOG_ERR, r->server);
+
+                    SSL_set_verify_result(ssl, X509_V_ERR_CERT_UNTRUSTED);
+                }
+                else
+                {
+                    SSL_set_verify_result(ssl, X509_V_OK);
+                }
+            }
+            else {
+#endif
             STACK_OF(X509) *cert_stack;
 
             /* perform just a manual re-verification of the peer */
@@ -739,6 +819,9 @@
                 /* we created this ourselves, so free it */
                 sk_X509_pop_free(cert_stack, X509_free);
             }
+#ifdef HAVE_PATHFINDER
+            }
+#endif
         }
         else {
             request_rec *id = r->main ? r->main : r;
@@ -1287,10 +1370,50 @@
     return (DH *)mc->pTmpKeys[idx];
 }
 
+#ifdef HAVE_PATHFINDER
 /*
  * This OpenSSL callback function is called when OpenSSL
  * does client authentication and verifies the certificate chain.
  */
+int ssl_callback_pathfinder(X509_STORE_CTX *ctx, void *arg)
+{
+    SSL *ssl = X509_STORE_CTX_get_ex_data(ctx,
+                                          SSL_get_ex_data_X509_STORE_CTX_idx());
+    conn_rec *conn      = (conn_rec *)SSL_get_app_data(ssl);
+    SSLConnRec *sslconn = myConnConfig(conn);
+    server_rec *s       = conn->base_server;
+
+    char *errmsg;
+    int validated = pathfinder_helper(ctx->cert, s, &errmsg);
+
+    if (!validated)
+    {
+        int errnum = X509_V_ERR_CERT_UNTRUSTED;
+
+        if (sslconn->client_cert) {
+            X509_free(sslconn->client_cert);
+            sslconn->client_cert = NULL;
+        }
+        sslconn->client_dn = NULL;
+
+        if (!strncmp(errmsg, "Couldn't download certificate signer", 36))
+            errnum = X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT;
+        else if (!strncmp(errmsg, "Couldn't download CRL", 21))
+            errnum = X509_V_ERR_UNABLE_TO_GET_CRL;
+
+        X509_STORE_CTX_set_error(ctx, errnum);
+        sslconn->verify_error = X509_verify_cert_error_string(errnum);
+        SSL_set_verify_result(sslconn->ssl, errnum);
+    }
+    else
+        SSL_set_verify_result(sslconn->ssl, X509_V_OK);
+
+    free(errmsg);
+
+    return validated;
+}
+#endif
+
 int ssl_callback_SSLVerify(int ok, X509_STORE_CTX *ctx)
 {
     /* Get Apache context back through OpenSSL context */
diff -urN httpd-2.2.19-clean/modules/ssl/ssl_private.h httpd-2.2.19-pathfinder/modules/ssl/ssl_private.h
--- httpd-2.2.19-clean/modules/ssl/ssl_private.h	2011-04-14 09:56:17.000000000 -0400
+++ httpd-2.2.19-pathfinder/modules/ssl/ssl_private.h	2011-07-29 13:43:15.000000000 -0400
@@ -476,6 +476,10 @@
     int              session_cache_timeout;
     BOOL             cipher_server_pref;
     BOOL             insecure_reneg;
+#ifdef HAVE_PATHFINDER
+    BOOL             pathfinder_enabled;
+    const char      *pathfinder_policy;
+#endif
     modssl_ctx_t    *server;
     modssl_ctx_t    *proxy;
     ssl_enabled_t    proxy_ssl_check_peer_expire;
@@ -570,6 +574,10 @@
 const char  *ssl_cmd_SSLProxyCheckPeerCN(cmd_parms *cmd, void *dcfg, int flag);
 
 const char *ssl_cmd_SSLFIPS(cmd_parms *cmd, void *dcfg, int flag);
+#ifdef HAVE_PATHFINDER
+const char  *ssl_cmd_SSLPathfinder(cmd_parms *, void *, const char *);
+const char  *ssl_cmd_SSLPathfinderPolicy(cmd_parms *, void *, const char *);
+#endif
 
 /**  module initialization  */
 int          ssl_init_Module(apr_pool_t *, apr_pool_t *, apr_pool_t *, server_rec *);
@@ -593,6 +601,9 @@
 /**  OpenSSL callbacks */
 RSA         *ssl_callback_TmpRSA(SSL *, int, int);
 DH          *ssl_callback_TmpDH(SSL *, int, int);
+#ifdef HAVE_PATHFINDER
+int          ssl_callback_pathfinder(X509_STORE_CTX *, void *);
+#endif
 int          ssl_callback_SSLVerify(int, X509_STORE_CTX *);
 int          ssl_callback_SSLVerify_CRL(int, X509_STORE_CTX *, conn_rec *);
 int          ssl_callback_proxy_cert(SSL *ssl, MODSSL_CLIENT_CERT_CB_ARG_TYPE **x509, EVP_PKEY **pkey);
